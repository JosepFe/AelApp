<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Devon4Net.WebAPI.Implementation</name>
    </assembly>
    <members>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController">
            <summary>
            Auth controller sample.
            Please remember to avoid the use ob logic in a controller !!!
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.#ctor(Devon4Net.Infrastructure.JWT.Handlers.IJwtHandler)">
            <summary>
            Constructor with DI
            </summary>
            <param name="jwtHandler"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.Login(System.String,System.String)">
            <summary>
            Performs the login proces via the user/password flow
            This is only a sample. Please avoid any logic on the controller.
            </summary>
            <returns>LoginResponse class will provide the JWT token to securize the server calls</returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Controllers.AuthController.CurrentUser">
            <summary>
            Provides the information related to the logged user
            This is only a sample. Please never put any logic on a controller
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo">
            <summary>
            CorporateBasicInfo definition
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Id">
            <summary>
            the identifier
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CorporateBasicInfo.Value">
            <summary>
            the provided value
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse">
            <summary>
            CurrentUserResponse definition
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.UserName">
            <summary>
            UserName
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.AuthManagement.Dto.CurrentUserResponse.CorporateInfo">
            <summary>
            List of claims
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.UserManagement.Dto.LoginResponse">
            <summary>
            LoginResponse
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.UserManagement.Dto.LoginResponse.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController">
            <summary>
            Inhabitants controller
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController.#ctor(Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService)">
            <summary>
            Constructor
            </summary>
            <param name="todoService"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController.CreateUser(Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.CreateUserDto)">
            <summary>
            Creates a User
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController.DeleteUser(Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.DeleteUserDto)">
            <summary>
            Delete a User
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController.RegisterUserTown(Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.RegisterUserTownDto)">
            <summary>
            Register a User in town
            </summary>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Controller.InhabitantsController.UserBelongsTown(Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Dto.UserBelongTownDto)">
            <summary>
            Check if user belongs to a town
            </summary>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException">
            <summary>
            Custom exception EmployeeNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.AelNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException">
            <summary>
            Custom exception EmployeeNotFoundException
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException.StatusCode">
            <summary>
            The forced http status code to be fired on the exception manager
            </summary>
        </member>
        <member name="P:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException.ShowMessage">
            <summary>
            Show the message on the response?
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException"/> class.
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Exceptions.UserAlreadyExistException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService">
            <summary>
            InhabitantsService interface
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService.CreateUser(System.String,System.String,System.String)">
            <summary>
            CreateUser
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService.DeleteUser(System.String,System.String)">
            <summary>
            Delete user
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService.RegisterUserTown(System.String,System.String,System.String,System.String)">
            <summary>
            Register a user in a specific town
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.IInhabitantsService.CheckUserBelongsTown(System.String,System.String,System.String)">
            <summary>
            Checks user belongs to a town
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService">
            <summary>
            TODO service implementation
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService.#ctor(Devon4Net.Domain.UnitOfWork.UnitOfWork.IUnitOfWork{Devon4Net.WebAPI.Implementation.Domain.Database.AelContext})">
            <summary>
            Constructor
            </summary>
            <param name="uoW"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService.CreateUser(System.String,System.String,System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService.DeleteUser(System.String,System.String)">
            <summary>
            Deletes the User by name and surname
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService.RegisterUserTown(System.String,System.String,System.String,System.String)">
            <summary>
            Register the User to a town
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Business.InhabitantsManagement.Services.InhabitantsService.CheckUserBelongsTown(System.String,System.String,System.String)">
            <summary>
            Check if user belongs to a town
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Configure.DevonConfiguration">
            <summary>
            DevonConfiguration
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Configure.DevonConfiguration.SetupDevonDependencyInjection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Sets up the service dependency injection
            For example:
            services.AddTransient"ITodoService, TodoService"();
            services.AddTransient"ITodoRepository, TodoRepository"();
            Put your DI declarations here
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Configure.DevonConfiguration.SetupDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection@,Microsoft.Extensions.Configuration.IConfiguration@)">
            <summary>
            Setup here your database connections.
            To use RabbitMq message backup declare the 'RabbitMqBackupContext' database setup
            PE: services.SetupDatabase&lt;RabbitMqBackupContext&gt;($"Data Source={FileOperations.GetFileFullPath("RabbitMqBackupSqLite.db")}", DatabaseType.Sqlite);
            Please add the connection strings to enable the backup messaging for MediatR abd RabbitMq using MediatRBackupContext and RabbitMqBackupContext
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.#ctor(Devon4Net.WebAPI.Implementation.Domain.Database.AelContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.GetTownByName(System.String)">
            <summary>
            Get the Town by name
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.WebAPI.Implementation.Domain.Entities.Town,System.Boolean}})">
            <summary>
            Get TODO method
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.GetTodoById(System.Guid)">
            <summary>
            Geto the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.Create(System.String,System.String)">
            <summary>
            Creates the TODO
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.TownRepository.DeleteTodoById(System.Guid)">
            <summary>
            Deletes the TODO by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Data.Repositories.UserRepository">
            <summary>
            Repository implementation for the TODOS
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserRepository.#ctor(Devon4Net.WebAPI.Implementation.Domain.Database.AelContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserRepository.GetUserByNameAndSurname(System.String,System.String)">
            <summary>
            Geto the TODO by id
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserRepository.Create(System.String,System.String,System.String)">
            <summary>
            Creates User
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserRepository.DeleteUserByNameAndSuername(System.String,System.String)">
            <summary>
            Deletes the User by id
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Data.Repositories.UserTownRepository">
            <summary>
            Repository implementation for the UserTownS
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserTownRepository.#ctor(Devon4Net.WebAPI.Implementation.Domain.Database.AelContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserTownRepository.GetUserTownByUserId(System.Guid)">
            <summary>
            Get the UserTown by userId
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserTownRepository.Create(System.Guid,System.Guid,System.DateTime,System.String)">
            <summary>
            Creates the UserTown
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Data.Repositories.UserTownRepository.DeleteUserTownById(System.Guid)">
            <summary>
            Deletes the UserTown by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository.GetTownByName(System.String)">
            <summary>
            GetTownByName
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository.GetTodo(System.Linq.Expressions.Expression{System.Func{Devon4Net.WebAPI.Implementation.Domain.Entities.Town,System.Boolean}})">
            <summary>
            
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository.GetTodoById(System.Guid)">
            <summary>
            GetTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository.Create(System.String,System.String)">
            <summary>
            Create
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.ITownRepository.DeleteTodoById(System.Guid)">
            <summary>
            DeleteTodoById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserRepository">
            <summary>
            TodoRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserRepository.GetUserByNameAndSurname(System.String,System.String)">
            <summary>
            GetUserByNameAndSurname
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserRepository.Create(System.String,System.String,System.String)">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserRepository.DeleteUserByNameAndSuername(System.String,System.String)">
            <summary>
            DeleteTodoById
            </summary>
        </member>
        <member name="T:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserTownRepository">
            <summary>
            UserTownRepository interface
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserTownRepository.GetUserTownByUserId(System.Guid)">
            <summary>
            GetUserTown
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserTownRepository.Create(System.Guid,System.Guid,System.DateTime,System.String)">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserTownRepository.DeleteUserTownById(System.Guid)">
            <summary>
            DeleteUserTownById
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Devon4Net.WebAPI.Implementation.Domain.RepositoryInterfaces.IUserTownRepository.GetUserTownByUserIdAndTownId(System.Guid,System.Guid)" -->
    </members>
</doc>
